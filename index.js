// JavaScript Assincrono

function buscaDados(callback) {
  setTimeout(() => {
    callback("Dados encontrados");
  }, 2000);
}

buscaDados((dados) => {
  console.log(dados);
});

function buscarUsuario(callback) {
  setTimeout(() => {
    callback({ id: 1, nome: "Murilo" });
  }, 1000);
}

function buscarPedidos(usuario, callback) {
  setTimeout(() => {
    callback(["Pedido 1", "Pedido 2"]);
  }, 1000);
}

buscarUsuario((usuario) => {
  buscarPedidos(usuario, (pedidos) => {
    console.log(pedidos);
  });
});

/*
Pr√°ticas para escrever Callbacks eficientes
Para evitar o Callback Hell:

Nomeie as Fun√ß√µes: Em vez de an√¥nimas, use fun√ß√µes nomeadas. Isso ajuda na leitura e na manuten√ß√£o do c√≥digo.
Modularize: Separe as fun√ß√µes em m√≥dulos ou arquivos. Fica mais organizado e leg√≠vel.
Use Promises (spoiler do pr√≥ximo t√≥pico üòâ): Promises s√£o uma forma mais elegante de lidar com assincronismo, evitando o Callback Hell.
Callbacks s√£o a base do assincronismo no JavaScript, voc√™ provavelmente j√° viu callbacks, e se n√£o viu com toda certeza ver√°, principalmente em bibliotecas como express. Mas tem que saber usar pra n√£o virar bagun√ßa!
*/
